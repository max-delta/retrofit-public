<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<ImportGroup Label="PropertySheets">
		<Import Project=".\Global.cpp.props" />
		<Import Project=".\Directories.props" />
		<Import Project=".\BuildStamp.props" />
	</ImportGroup>

	<PropertyGroup Condition="'$(RFCompiler)'=='MSVC'">
		<!--All on by default, then manipulated by StaticAnalysis.h-->
		<CodeAnalysisRuleSet>AllRules.ruleset</CodeAnalysisRuleSet>

		<!-- Code analysis is still rocky, so it's only on for special builds -->
		<RunCodeAnalysis Condition="'$(RFCodeAnalysis)'=='true'">true</RunCodeAnalysis>
		<RunCodeAnalysis Condition="'$(RFCodeAnalysis)'!='true'">false</RunCodeAnalysis>
		<EnableMicrosoftCodeAnalysis>true</EnableMicrosoftCodeAnalysis>
		<EnableClangTidyCodeAnalysis>false</EnableClangTidyCodeAnalysis>

		<!--If we bothered to turn a rule on, yell about it-->
		<CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>
	</PropertyGroup>

	<PropertyGroup Condition="'$(RFCompiler)'=='LLVM'">
		<!-- Sadly, clang-tidy still hangs (Last checked: v10.0.0) -->
		<RunCodeAnalysis>false</RunCodeAnalysis>
		<EnableMicrosoftCodeAnalysis>false</EnableMicrosoftCodeAnalysis>
		<EnableClangTidyCodeAnalysis>true</EnableClangTidyCodeAnalysis>

		<!--If we bothered to turn a rule on, yell about it-->
		<CodeAnalysisTreatWarningsAsErrors>true</CodeAnalysisTreatWarningsAsErrors>
	</PropertyGroup>

	<ItemDefinitionGroup>
		<ClCompile>
			<!--It's us!-->
			<PreprocessorDefinitions>RETROFIT; %(PreprocessorDefinitions)</PreprocessorDefinitions>

			<!--If we bothered to turn a warning on, yell about it-->
			<TreatWarningAsError>true</TreatWarningAsError>

			<!--All warnings on, unless explicitly disabled-->
			<WarningLevel>EnableAllWarnings</WarningLevel>

			<!--Various top-level includes, kept to a minimum-->
			<AdditionalIncludeDirectories>
				$(RFRootDir)libs\;
				$(RFRootDir)third_party\;
				$(RFRootDir)third_party\googletest\include;
				%(AdditionalIncludeDirectories)
			</AdditionalIncludeDirectories>
		</ClCompile>

		<ClCompile Condition="'$(RFCompiler)'=='MSVC'">
			<!--PREfast is the undocumented (yet publicly known) internal name for
				the C++ static code analysis logic-->
			<EnablePREfast>true</EnablePREfast>

			<!--Reduce warning level in crappy MS headers, determnied via angle
				bracket include directives-->
			<ExternalWarningLevel>Level3</ExternalWarningLevel>
			<TreatAngleIncludeAsExternal>true</TreatAngleIncludeAsExternal>

			<!--This configures static analysis rules-->
			<ForcedIncludeFiles>$(RFRootDir)props\StaticAnalysis.h; %(ForcedIncludeFiles)</ForcedIncludeFiles>

			<!--TODO: Document all these-->
			<DisableSpecificWarnings>
				4100;	4127; 4251; 4514; 4710; 4711; 4738; 4820; 4946;
				5026; 5027; 5045;
				6326;
				%(DisableSpecificWarnings)
			</DisableSpecificWarnings>

			<!--Don't care about variables just used for asserts-->
			<DisableSpecificWarnings Condition="'$(RFConfig)'!='Debug'">
				4189; %(DisableSpecificWarnings)
			</DisableSpecificWarnings>

			<!-- Azure build machines don't always have the latest VS, so ignore
				complaints about unknown warnings -->
			<DisableSpecificWarnings Condition="'$(RFBuildMachine)'=='Azure'">
				4619; %(DisableSpecificWarnings)
			</DisableSpecificWarnings>
		</ClCompile>

		<ClCompile Condition="'$(RFCompiler)'=='LLVM'">
			<!--Treat these as system headers (not our code)-->
			<AdditionalOptions>
				-imsvc $(RFRootDir)third_party\
				-imsvc $(RFRootDir)third_party\googletest\include
				%(AdditionalOptions)
			</AdditionalOptions>

			<!-- Misc overly pedantic style warnings -->
			<AdditionalOptions>
				-Wno-format-nonliteral
				-Wno-missing-prototypes
				-Wno-missing-variable-declarations
				-Wno-pedantic
				-Wno-shadow-field-in-constructor
				-Wno-shadow-uncaptured-local
				-Wno-unused-macros
				-Wno-unused-parameter
				%(AdditionalOptions)
			</AdditionalOptions>

			<!-- Disable warnings that complain about code intended to catch various
			  forms of memory corruption in unoptimized builds, even though it
				*shouldn't* be possible in well-formed code -->
			<AdditionalOptions>
				-Wno-covered-switch-default
				-Wno-tautological-undefined-compare
				%(AdditionalOptions)
			</AdditionalOptions>

			<!-- Some warnings are just plain broken -->
			<AdditionalOptions>
				-Wno-ignored-attributes
				%(AdditionalOptions)
			</AdditionalOptions>

			<!-- Some token patterns are practically unavoidable with macros -->
			<AdditionalOptions>
				-Wno-extra-semi
				-Wno-extra-semi-stmt
				%(AdditionalOptions)
			</AdditionalOptions>

			<!-- Disable warnings about template patterns that reduce link times -->
			<AdditionalOptions>
				-Wno-undefined-func-template
				%(AdditionalOptions)
			</AdditionalOptions>

			<!-- Technically '__' prefixes are reserved, but we use '___RF' to denote
				internal engine details, which should be safe in practical cases -->
			<AdditionalOptions>
				-Wno-reserved-id-macro
				-Wno-reserved-identifier
				%(AdditionalOptions)
			</AdditionalOptions>

			<!-- CRT-init hooks are a fact of life, even though they should be
				carefully considered and scrutinized -->
			<AdditionalOptions>
				-Wno-exit-time-destructors
				-Wno-global-constructors
				%(AdditionalOptions)
			</AdditionalOptions>

			<!--Goal is to use targeted suppression machinery instead of these-->
			<AdditionalOptions>
				-Wno-non-virtual-dtor
				%(AdditionalOptions)
			</AdditionalOptions>

			<!--Don't care about variables just used for asserts, but truly unused
				variables should be an error -->
			<AdditionalOptions Condition="'$(RFConfig)'!='Debug'">
				-Wno-unused-variable
				-Wno-unused-but-set-variable
				%(AdditionalOptions)
			</AdditionalOptions>

			<!--Don't care about intentionally unreachable code, and there isn't a
				good way to ditinguish from accidentally unreachable-->
			<AdditionalOptions>
				-Wno-unreachable-code
				%(AdditionalOptions)
			</AdditionalOptions>

			<!--Older versions of Clang failed to move, and instead did an improper
				copy on returns that required an implicit cast, but we don't care about
				those old versions, and this is just a portability warning for them-->
			<!--NOTE: Removed as legacy in https://reviews.llvm.org/D88220-->
			<!--AdditionalOptions>
				-Wno-return-std-move-in-c++11
				%(AdditionalOptions)
			</AdditionalOptions-->

			<!-- Build machines provide buildstamps via scripts, but local builds can
				be more lax and use the C preprocessor, since otherwise the changing
				buildstamp would force a full rebuild each time -->
			<AdditionalOptions Condition="'$(RFBuildMachine)'==''">
				-Wno-date-time
				-Wno-pch-date-time
				%(AdditionalOptions)
			</AdditionalOptions>
		</ClCompile>

		<Lib>
			<!--Complains about effectively empty compilations units, but we use
				those for targeted header tests-->
			<AdditionalOptions>/ignore:4221 %(AdditionalOptions)</AdditionalOptions>
		</Lib>

		<Link />
	</ItemDefinitionGroup>

</Project>