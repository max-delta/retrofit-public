<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <ImportGroup Label="PropertySheets" />

  <PropertyGroup Label="UserMacros" />

  <PropertyGroup />

  <ItemDefinitionGroup>
    <ClCompile>
      <!--Disable exception handling, prefer to just crash instead-->
      <ExceptionHandling>false</ExceptionHandling>

      <!--Complains that exceptions aren't enabled, don't care-->
      <DisableSpecificWarnings>4577;%(DisableSpecificWarnings)</DisableSpecificWarnings>

      <!--Complains about subtle DLL logic. Would like to have on, but the warning is flawed-->
      <DisableSpecificWarnings>4275;%(DisableSpecificWarnings)</DisableSpecificWarnings>

      <!--MS STL implementation gets pissy if this define isn't set-->
      <PreprocessorDefinitions>_HAS_EXCEPTIONS=0;%(PreprocessorDefinitions)</PreprocessorDefinitions>

      <!--C++17 for now, C++20 isn't ready yet-->
      <LanguageStandard>stdcpp17</LanguageStandard>

      <!--This is sometimes futzy and can cause corruption, but corruption
        seems to be mostly limited to batch builds (batch_build.bat avoids
        the associated problems)-->
      <MultiProcessorCompilation>true</MultiProcessorCompilation>

      <!--Eh... the additional runtime cost is trivial and the checks are nice-->
      <SDLCheck>true</SDLCheck>
    </ClCompile>

    <ClCompile Condition="'$(Platform)'!='LLVM_x64'">
      <!--Avoid MS-specific hacks since we're cross-platform-->
      <ConformanceMode>true</ConformanceMode>
    </ClCompile>

    <ClCompile Condition="'$(Platform)'=='LLVM_x64'">
      <!--Not supported by LLVM-->
      <SupportJustMyCode>false</SupportJustMyCode>

      <AdditionalOptions>
        -Wno-error
        -Wno-clang-cl-pch
        -Wno-unused-command-line-argument
        -Wno-pedantic
        -Wno-c++98-compat
        -Wno-c++98-compat-pedantic
        -Wno-unused-macros
        -Wno-unused-parameter
        -Wno-reserved-id-macro
        -Wno-extra-semi
        -Wno-missing-prototypes
        -Wno-covered-switch-default
        -Wno-tautological-undefined-compare
        -Wno-shadow-field-in-constructor
        -Wno-global-constructors
        -Wno-exit-time-destructors
        -Wno-format-nonliteral
        -Wno-ignored-attributes
        -Wno-undefined-func-template
        %(AdditionalOptions)
      </AdditionalOptions>

      <!--Goal is to have warnings as errors on LLVM, but it's ongoing-->
      <AdditionalOptions>
        -Werror=nonportable-include-path
        -Werror=newline-eof
        -Werror=extra-qualification
        -Werror=unused-lambda-capture
        %(AdditionalOptions)
      </AdditionalOptions>

      <!--Goal is to use targeted suppression machinery instead of these-->
      <AdditionalOptions>
        -Wno-non-virtual-dtor
        %(AdditionalOptions)
      </AdditionalOptions>

      <!--Don't care about variables just used for asserts-->
      <AdditionalOptions Condition="'$(Platform)'!='Debug'">
        -Wno-unused-variable
        %(AdditionalOptions)
      </AdditionalOptions>

      <!--Truly unused variables should be an error-->
      <AdditionalOptions Condition="'$(Platform)'=='Debug'">
        -Werror=unused-variable
        %(AdditionalOptions)
      </AdditionalOptions>
    </ClCompile>

    <Link>
      <!--Want full PDBs so third-party tools work better-->
      <GenerateDebugInformation>DebugFull</GenerateDebugInformation>
    </Link>

    <Lib>
      <!--Complains about effectively empty compilations units, but we use
        those for targeted header tests-->
      <AdditionalOptions>/ignore:4221 %(AdditionalOptions)</AdditionalOptions>
    </Lib>
  </ItemDefinitionGroup>

  <ItemGroup Condition="'$(ProjectName)'!='core_allocate'">
    <!-- Link allocation lib with everything, to allow for hooks -->
    <ProjectReference Include="$(SolutionDir)libs\core_allocate\core_allocate.vcxproj">
      <Project>{c5171146-7ace-4819-b4ca-6a36beb91e85}</Project>
    </ProjectReference>
  </ItemGroup>
</Project>